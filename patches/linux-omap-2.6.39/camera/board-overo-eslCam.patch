--- /dev/null	2011-12-12 23:23:52.341136932 +0100
+++ b/arch/arm/mach-omap2/board-overo-eslCam.c	2011-12-13 12:14:11.001536892 +0100
@@ -0,0 +1,96 @@
+#include <linux/gpio.h>
+#include <linux/regulator/machine.h>
+
+#include <plat/i2c.h>
+
+#include <media/mt9p031.h>
+#include <asm/mach-types.h>
+#include "devices.h"
+#include "../../../drivers/media/video/omap3isp/isp.h"
+
+#define MT9P031_ADDRESS		0x48
+#define MT9P031_RESET_GPIO	98
+#define MT9P031_XCLK		ISP_XCLK_A
+#define MT9P031_EXT_FREQ	21000000
+
+// static struct regulator *reg_1v8, *reg_2v8;
+
+static int eslCam_cam_set_xclk(struct v4l2_subdev *subdev, int hz)
+{
+	struct isp_device *isp = v4l2_dev_to_isp_device(subdev->v4l2_dev);
+
+	return isp->platform_cb.set_xclk(isp, hz, MT9P031_XCLK);
+}
+
+static int eslCam_cam_reset(struct v4l2_subdev *subdev, int active)
+{
+	/* Set RESET_BAR to !active */
+	gpio_set_value(MT9P031_RESET_GPIO, !active);
+
+	return 0;
+}
+
+static struct mt9p031_platform_data eslCam_mt9p031_platform_data = {
+	.set_xclk	= eslCam_cam_set_xclk,
+	.reset		= eslCam_cam_reset,
+	.ext_freq	= MT9P031_EXT_FREQ,
+	.target_freq	= 48000000,
+	.version	= MT9P031_COLOR_VERSION,
+};
+
+static struct i2c_board_info mt9p031_camera_i2c_device = {
+	I2C_BOARD_INFO("mt9p031", MT9P031_ADDRESS),
+	.platform_data = &eslCam_mt9p031_platform_data,
+};
+
+static struct isp_subdev_i2c_board_info mt9p031_camera_subdevs[] = {
+	{
+		.board_info = &mt9p031_camera_i2c_device,
+		.i2c_adapter_id = 3,
+	},
+	{ NULL, 0, },
+};
+
+static struct isp_v4l2_subdevs_group eslCam_camera_subdevs[] = {
+	{
+		.subdevs = mt9p031_camera_subdevs,
+		.interface = ISP_INTERFACE_PARALLEL,
+		.bus = {
+			.parallel = {
+				.data_lane_shift = 0,
+				.clk_pol = 1,
+				.bridge = ISPCTRL_PAR_BRIDGE_DISABLE,
+			}
+		},
+	},
+	{ },
+};
+
+static struct isp_platform_data eslCam_isp_platform_data = {
+	.subdevs = eslCam_camera_subdevs,
+};
+
+static int __init eslCam_camera_init(void)
+{
+	if (!machine_is_overo())
+		return 0;
+
+// 	reg_1v8 = regulator_get(NULL, "cam_1v8");
+// 	if (IS_ERR(reg_1v8))
+// 		pr_err("%s: cannot get cam_1v8 regulator\n", __func__);
+// 	else
+// 		regulator_enable(reg_1v8);
+// 
+// 	reg_2v8 = regulator_get(NULL, "cam_2v8");
+// 	if (IS_ERR(reg_2v8))
+// 		pr_err("%s: cannot get cam_2v8 regulator\n", __func__);
+// 	else
+// 		regulator_enable(reg_2v8);
+
+	gpio_request(MT9P031_RESET_GPIO, "cam_rst");
+	gpio_direction_output(MT9P031_RESET_GPIO, 0);
+	omap3_init_camera(&eslCam_isp_platform_data);
+	return 0;
+}
+
+late_initcall(eslCam_camera_init);
--- a/arch/arm/mach-omap2/Makefile.old	2011-12-13 13:15:03.751945429 +0100
+++ b/arch/arm/mach-omap2/Makefile	2011-12-13 13:15:38.541564715 +0100
@@ -194,6 +194,7 @@
 obj-$(CONFIG_MACH_OMAP3_TORPEDO)        += board-omap3logic.o \
 					   hsmmc.o
 obj-$(CONFIG_MACH_OVERO)		+= board-overo.o \
+					   board-overo-eslCam.o \
 					   hsmmc.o
 obj-$(CONFIG_MACH_OMAP3EVM)		+= board-omap3evm.o \
 					   hsmmc.o
